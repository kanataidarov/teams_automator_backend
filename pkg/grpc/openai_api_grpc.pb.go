// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: teams_automator/openai_api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OpenAiApi_Transcribe_FullMethodName = "/interview_automator.OpenAiApi/Transcribe"
)

// OpenAiApiClient is the client API for OpenAiApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAiApiClient interface {
	Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error)
}

type openAiApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAiApiClient(cc grpc.ClientConnInterface) OpenAiApiClient {
	return &openAiApiClient{cc}
}

func (c *openAiApiClient) Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscribeResponse)
	err := c.cc.Invoke(ctx, OpenAiApi_Transcribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenAiApiServer is the server API for OpenAiApi service.
// All implementations must embed UnimplementedOpenAiApiServer
// for forward compatibility
type OpenAiApiServer interface {
	Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error)
	mustEmbedUnimplementedOpenAiApiServer()
}

// UnimplementedOpenAiApiServer must be embedded to have forward compatible implementations.
type UnimplementedOpenAiApiServer struct {
}

func (UnimplementedOpenAiApiServer) Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedOpenAiApiServer) mustEmbedUnimplementedOpenAiApiServer() {}

// UnsafeOpenAiApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAiApiServer will
// result in compilation errors.
type UnsafeOpenAiApiServer interface {
	mustEmbedUnimplementedOpenAiApiServer()
}

func RegisterOpenAiApiServer(s grpc.ServiceRegistrar, srv OpenAiApiServer) {
	s.RegisterService(&OpenAiApi_ServiceDesc, srv)
}

func _OpenAiApi_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAiApiServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAiApi_Transcribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAiApiServer).Transcribe(ctx, req.(*TranscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenAiApi_ServiceDesc is the grpc.ServiceDesc for OpenAiApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAiApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interview_automator.OpenAiApi",
	HandlerType: (*OpenAiApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcribe",
			Handler:    _OpenAiApi_Transcribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teams_automator/openai_api.proto",
}
